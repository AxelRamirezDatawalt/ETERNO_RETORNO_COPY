name: Setup Dagster Services

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  setup-dagster:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [self-hosted-windows]

    env:
      DAGSTER_HOME: C:\dagster_home

    steps:
      - name: Save sensitive files
        shell: cmd
        run: |
          if exist env (copy env %RUNNER_TEMP%\env)
          if exist key.json (copy key.json %RUNNER_TEMP%\key.json)

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: false
          fetch-depth: 2

      - name: Set PowerShell execution policy
        shell: cmd
        run: powershell -Command "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser"

      - name: Install Rust
        shell: powershell
        run: |
          Invoke-WebRequest https://win.rustup.rs/x86_64 -OutFile rustup-init.exe
          .\rustup-init.exe -y --default-toolchain stable --profile minimal
          Remove-Item rustup-init.exe
          $env:Path += ";$env:USERPROFILE\.cargo\bin"
          rustc --version
          cargo --version

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      # Detener servicios existentes si existen
      - name: Stop existing services gracefully
        shell: powershell
        continue-on-error: true
        run: |
          if (Test-Path "$env:DAGSTER_HOME\nssm.exe") {
              Write-Host "Stopping dagit_service..."
              & "$env:DAGSTER_HOME\nssm.exe" stop dagit_service | Out-Null
              Start-Sleep -Seconds 10
              
              Write-Host "Stopping dagster_service..."
              & "$env:DAGSTER_HOME\nssm.exe" stop dagster_service | Out-Null
              Start-Sleep -Seconds 10
          } else {
              Write-Host "NSSM not found in DAGSTER_HOME, services may not exist yet."
          }


      # Preparar directorio DAGSTER_HOME
      - name: Prepare DAGSTER_HOME directory
        shell: powershell
        run: |
          # Si el directorio existe, preservar solo archivos sensibles
          if (Test-Path $env:DAGSTER_HOME) {
              # Guardar temporalmente archivos sensibles si existen
              $sensitivePaths = @("env", "key.json", "dagster.log", "dagster.err", "dagster-webserver.log", "dagster-webserver.err")
              foreach ($path in $sensitivePaths) {
                  $fullPath = Join-Path $env:DAGSTER_HOME $path
                  if (Test-Path $fullPath) {
                      Copy-Item -Path $fullPath -Destination $env:RUNNER_TEMP -Force
                  }
              }
              
              # Borrar directorio
              Remove-Item -Path $env:DAGSTER_HOME -Recurse -Force
          }
          
          # Crear directorio limpio y subdirectorios
          New-Item -Path $env:DAGSTER_HOME -ItemType Directory -Force | Out-Null
          $dirs = @(
            "$env:DAGSTER_HOME\logs",
            "$env:DAGSTER_HOME\compute_logs"
          )
          foreach ($dir in $dirs) {
              New-Item -Path $dir -ItemType Directory -Force | Out-Null
          }
          
          # Restaurar archivos sensibles
          foreach ($path in $sensitivePaths) {
              $tempPath = Join-Path $env:RUNNER_TEMP $path
              $dagsterPath = Join-Path $env:DAGSTER_HOME $path
              if (Test-Path $tempPath) {
                  Copy-Item -Path $tempPath -Destination $dagsterPath -Force
              }
          }

      - name: Copy project files to DAGSTER_HOME
        shell: powershell
        run: |
          Copy-Item -Path "$env:GITHUB_WORKSPACE\*" -Destination $env:DAGSTER_HOME -Recurse -Force

      - name: Restore sensitive files
        shell: cmd
        run: |
          if exist %RUNNER_TEMP%\env (copy %RUNNER_TEMP%\env %DAGSTER_HOME%\env)
          if exist %RUNNER_TEMP%\key.json (copy %RUNNER_TEMP%\key.json %DAGSTER_HOME%\key.json)
  

      - name: Setup Python virtual environment in DAGSTER_HOME
        shell: powershell
        run: |
          # Permitir ejecución de scripts en PowerShell
          Set-ExecutionPolicy RemoteSigned -Scope Process -Force
            
          # Definir variables
          $PYTHON_PATH = "C:\actions-runner\_work\_tool\Python\3.11.9\x64\python.exe"
          $DAGSTER_HOME = "C:\dagster\home"
          $VENV_NAME = "env"
  
          # Ir a la carpeta de DAGSTER_HOME
          Set-Location $DAGSTER_HOME
  
          # Crear un nuevo entorno virtual
          Write-Host "Creating virtual environment..."
          & $PYTHON_PATH -m venv $VENV_NAME
  
          # Activar el entorno virtual
          Write-Host "Activating virtual environment..."
          .\$VENV_NAME\Scripts\Activate.ps1
            
          # Instalar herramientas básicas
          Write-Host "Installing/updating pip, setuptools, and wheel..."
          python -m pip install --upgrade pip setuptools wheel
            
          # Instalar dependencias del proyecto
          Write-Host "Installing dependencies from requirements.txt..."
          pip install --no-cache-dir -r requirements.txt
            
          # Instalar el proyecto en modo editable
          Write-Host "Installing project in editable mode..."
          pip install -e .
            
          # Verificar instalación de Dagster
          Write-Host "Verifying Dagster installation..."
          pip list | findstr dagster
  
      - name: Download and Install NSSM
        shell: powershell
        run: |
          cd $env:DAGSTER_HOME

          Invoke-WebRequest -Uri 'https://nssm.cc/ci/nssm-2.24-101-g897c7ad.zip' -OutFile 'nssm.zip'
          Expand-Archive -Path 'nssm.zip' -DestinationPath . -Force
          
          if (-not (Test-Path "nssm-2.24-101-g897c7ad\win64\nssm.exe")) {
              Write-Host "NSSM download failed. Exiting."
              exit 1
          }
          
          Copy-Item "nssm-2.24-101-g897c7ad\win64\nssm.exe" . -Force
          
          Remove-Item 'nssm.zip' -Force
          Remove-Item 'nssm-2.24-101-g897c7ad' -Recurse -Force

      - name: Create service batch files
        shell: cmd
        run: |
          cd %DAGSTER_HOME%
          
          echo @echo off > dagster.bat
          echo set DAGSTER_HOME=%DAGSTER_HOME% >> dagster.bat
          echo cd %DAGSTER_HOME% >> dagster.bat
          echo call %DAGSTER_HOME%\.venv\Scripts\dagster-daemon run >> dagster.bat
          echo pause >> dagster.bat
          
          echo @echo off > dagster-webserver.bat
          echo set DAGSTER_HOME=%DAGSTER_HOME% >> dagster-webserver.bat
          echo cd %DAGSTER_HOME% >> dagster-webserver.bat
          echo call %DAGSTER_HOME%\.venv\Scripts\dagster-webserver -h 0.0.0.0 -p 3000 >> dagster-webserver.bat
          echo pause >> dagster-webserver.bat

      - name: Install and start services with NSSM
        shell: cmd
        continue-on-error: true
        run: |
          cd %DAGSTER_HOME%
          
          REM Eliminar servicios existentes
          echo Removing existing services...
          call nssm.exe remove dagster_service confirm
          call nssm.exe remove dagit_service confirm
          
          timeout /t 5
          
          REM Verificar que los archivos y ejecutables existen
          if not exist dagster.bat (
            echo ERROR: dagster.bat not found!
            dir
            exit 1
          )
          
          if not exist .venv\Scripts\dagster-daemon.exe (
            echo ERROR: dagster-daemon.exe not found in the virtual environment!
            dir .venv\Scripts\
            exit 1
          )
          
          REM Install Dagster Daemon Service
          echo Installing Dagster daemon service...
          call nssm.exe install dagster_service "%DAGSTER_HOME%\dagster.bat"
          call nssm.exe set dagster_service DisplayName "Dagster Service"
          call nssm.exe set dagster_service Description "Runs Dagster daemon process"
          call nssm.exe set dagster_service Start SERVICE_AUTO_START
          call nssm.exe set dagster_service AppDirectory "%DAGSTER_HOME%"
          call nssm.exe set dagster_service AppStdout "%DAGSTER_HOME%\dagster.log"
          call nssm.exe set dagster_service AppStderr "%DAGSTER_HOME%\dagster.err"
          
          REM Install Dagster Webserver Service
          echo Installing Dagster webserver service...
          call nssm.exe install dagit_service "%DAGSTER_HOME%\dagster-webserver.bat"
          call nssm.exe set dagit_service DisplayName "Dagster Webserver Service"
          call nssm.exe set dagit_service Description "Runs Dagster webserver process"
          call nssm.exe set dagit_service Start SERVICE_AUTO_START
          call nssm.exe set dagit_service AppDirectory "%DAGSTER_HOME%"
          call nssm.exe set dagit_service AppStdout "%DAGSTER_HOME%\dagster-webserver.log"
          call nssm.exe set dagit_service AppStderr "%DAGSTER_HOME%\dagster-webserver.err"
          
          REM Iniciar servicios en orden: primero el daemon, luego el webserver
          echo Starting services...
          call nssm.exe start dagster_service
          timeout /t 10
          call nssm.exe start dagit_service